
/app/(auth-pages)/forgot-password/page.tsx
import { forgotPasswordAction } from "@/app/actions";
import { FormMessage, Message } from "@/components/form-message";
import { SubmitButton } from "@/components/submit-button";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import Link from "next/link";
import { SmtpMessage } from "../smtp-message";

export default async function ForgotPassword(props: {
  searchParams: Promise<Message>;
}) {
  const searchParams = await props.searchParams;
  return (
    <>
      <form className="flex-1 flex flex-col w-full gap-2 text-foreground [&>input]:mb-6 min-w-64 max-w-64 mx-auto">
        <div>
          <h1 className="text-2xl font-medium">Reset Password</h1>
          <p className="text-sm text-secondary-foreground">
            Already have an account?{" "}
            <Link className="text-primary underline" href="/sign-in">
              Sign in
            </Link>
          </p>
        </div>
        <div className="flex flex-col gap-2 [&>input]:mb-3 mt-8">
          <Label htmlFor="email">Email</Label>
          <Input name="email" placeholder="you@example.com" required />
          <SubmitButton formAction={forgotPasswordAction}>
            Reset Password
          </SubmitButton>
          <FormMessage message={searchParams} />
        </div>
      </form>
      <SmtpMessage />
    </>
  );
}


/app/(auth-pages)/layout.tsx
export default async function Layout({
  children,
}: {
  children: React.ReactNode;
}) {
  return (
    <div className="max-w-7xl flex flex-col gap-12 items-start">{children}</div>
  );
}


/app/(auth-pages)/sign-in/page.tsx
import { signInAction } from "@/app/actions";
import { FormMessage, Message } from "@/components/form-message";
import { SubmitButton } from "@/components/submit-button";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import Link from "next/link";

export default async function Login(props: { searchParams: Promise<Message> }) {
  const searchParams = await props.searchParams;
  return (
    <form className="flex-1 flex flex-col min-w-64">
      <h1 className="text-2xl font-medium">Sign in</h1>
      <p className="text-sm text-foreground">
        Don't have an account?{" "}
        <Link className="text-foreground font-medium underline" href="/sign-up">
          Sign up
        </Link>
      </p>
      <div className="flex flex-col gap-2 [&>input]:mb-3 mt-8">
        <Label htmlFor="email">Email</Label>
        <Input name="email" placeholder="you@example.com" required />
        <div className="flex justify-between items-center">
          <Label htmlFor="password">Password</Label>
          <Link
            className="text-xs text-foreground underline"
            href="/forgot-password"
          >
            Forgot Password?
          </Link>
        </div>
        <Input
          type="password"
          name="password"
          placeholder="Your password"
          required
        />
        <SubmitButton pendingText="Signing In..." formAction={signInAction}>
          Sign in
        </SubmitButton>
        <FormMessage message={searchParams} />
      </div>
    </form>
  );
}


/app/(auth-pages)/sign-up/page.tsx
import { signUpAction } from "@/app/actions";
import { FormMessage, Message } from "@/components/form-message";
import { SubmitButton } from "@/components/submit-button";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import Link from "next/link";
import { SmtpMessage } from "../smtp-message";

export default async function Signup(props: {
  searchParams: Promise<Message>;
}) {
  const searchParams = await props.searchParams;
  if ("message" in searchParams) {
    return (
      <div className="w-full flex-1 flex items-center h-screen sm:max-w-md justify-center gap-2 p-4">
        <FormMessage message={searchParams} />
      </div>
    );
  }

  return (
    <>
      <form className="flex flex-col min-w-64 max-w-64 mx-auto">
        <h1 className="text-2xl font-medium">Sign up</h1>
        <p className="text-sm text text-foreground">
          Already have an account?{" "}
          <Link className="text-primary font-medium underline" href="/sign-in">
            Sign in
          </Link>
        </p>
        <div className="flex flex-col gap-2 [&>input]:mb-3 mt-8">
          <Label htmlFor="email">Email</Label>
          <Input name="email" placeholder="you@example.com" required />
          <Label htmlFor="password">Password</Label>
          <Input
            type="password"
            name="password"
            placeholder="Your password"
            minLength={6}
            required
          />
          <SubmitButton formAction={signUpAction} pendingText="Signing up...">
            Sign up
          </SubmitButton>
          <FormMessage message={searchParams} />
        </div>
      </form>
      <SmtpMessage />
    </>
  );
}


/app/(auth-pages)/smtp-message.tsx
import { ArrowUpRight, InfoIcon } from "lucide-react";
import Link from "next/link";

export function SmtpMessage() {
  return (
    <div className="bg-muted/50 px-5 py-3 border rounded-md flex gap-4">
      <InfoIcon size={16} className="mt-0.5" />
      <div className="flex flex-col gap-1">
        <small className="text-sm text-secondary-foreground">
          <strong> Note:</strong> Emails are rate limited. Enable Custom SMTP to
          increase the rate limit.
        </small>
        <div>
          <Link
            href="https://supabase.com/docs/guides/auth/auth-smtp"
            target="_blank"
            className="text-primary/50 hover:text-primary flex items-center text-sm gap-1"
          >
            Learn more <ArrowUpRight size={14} />
          </Link>
        </div>
      </div>
    </div>
  );
}


/app/actions.ts
"use server";

import { encodedRedirect } from "@/utils/utils";
import { createClient } from "@/utils/supabase/server";
import { headers } from "next/headers";
import { redirect } from "next/navigation";

export const signUpAction = async (formData: FormData) => {
  const email = formData.get("email")?.toString();
  const password = formData.get("password")?.toString();
  const supabase = await createClient();
  const origin = (await headers()).get("origin");

  if (!email || !password) {
    return encodedRedirect(
      "error",
      "/sign-up",
      "Email and password are required",
    );
  }

  const { error } = await supabase.auth.signUp({
    email,
    password,
    options: {
      emailRedirectTo: `${origin}/auth/callback`,
    },
  });

  if (error) {
    console.error(error.code + " " + error.message);
    return encodedRedirect("error", "/sign-up", error.message);
  } else {
    return encodedRedirect(
      "success",
      "/sign-up",
      "Thanks for signing up! Please check your email for a verification link.",
    );
  }
};

export const signInAction = async (formData: FormData) => {
  const email = formData.get("email") as string;
  const password = formData.get("password") as string;
  const supabase = await createClient();

  const { error } = await supabase.auth.signInWithPassword({
    email,
    password,
  });

  if (error) {
    return encodedRedirect("error", "/sign-in", error.message);
  }

  return redirect("/protected");
};

export const forgotPasswordAction = async (formData: FormData) => {
  const email = formData.get("email")?.toString();
  const supabase = await createClient();
  const origin = (await headers()).get("origin");
  const callbackUrl = formData.get("callbackUrl")?.toString();

  if (!email) {
    return encodedRedirect("error", "/forgot-password", "Email is required");
  }

  const { error } = await supabase.auth.resetPasswordForEmail(email, {
    redirectTo: `${origin}/auth/callback?redirect_to=/protected/reset-password`,
  });

  if (error) {
    console.error(error.message);
    return encodedRedirect(
      "error",
      "/forgot-password",
      "Could not reset password",
    );
  }

  if (callbackUrl) {
    return redirect(callbackUrl);
  }

  return encodedRedirect(
    "success",
    "/forgot-password",
    "Check your email for a link to reset your password.",
  );
};

export const resetPasswordAction = async (formData: FormData) => {
  const supabase = await createClient();

  const password = formData.get("password") as string;
  const confirmPassword = formData.get("confirmPassword") as string;

  if (!password || !confirmPassword) {
    encodedRedirect(
      "error",
      "/protected/reset-password",
      "Password and confirm password are required",
    );
  }

  if (password !== confirmPassword) {
    encodedRedirect(
      "error",
      "/protected/reset-password",
      "Passwords do not match",
    );
  }

  const { error } = await supabase.auth.updateUser({
    password: password,
  });

  if (error) {
    encodedRedirect(
      "error",
      "/protected/reset-password",
      "Password update failed",
    );
  }

  encodedRedirect("success", "/protected/reset-password", "Password updated");
};

export const signOutAction = async () => {
  const supabase = await createClient();
  await supabase.auth.signOut();
  return redirect("/sign-in");
};


/app/auth/callback/route.ts
import { createClient } from "@/utils/supabase/server";
import { NextResponse } from "next/server";

export async function GET(request: Request) {
  // The `/auth/callback` route is required for the server-side auth flow implemented
  // by the SSR package. It exchanges an auth code for the user's session.
  // https://supabase.com/docs/guides/auth/server-side/nextjs
  const requestUrl = new URL(request.url);
  const code = requestUrl.searchParams.get("code");
  const origin = requestUrl.origin;
  const redirectTo = requestUrl.searchParams.get("redirect_to")?.toString();

  if (code) {
    const supabase = await createClient();
    await supabase.auth.exchangeCodeForSession(code);
  }

  if (redirectTo) {
    return NextResponse.redirect(`${origin}${redirectTo}`);
  }

  // URL to redirect to after sign up process completes
  return NextResponse.redirect(`${origin}/protected`);
}


/app/layout.tsx
import DeployButton from "@/components/deploy-button";
import { EnvVarWarning } from "@/components/env-var-warning";
import HeaderAuth from "@/components/header-auth";
import { ThemeSwitcher } from "@/components/theme-switcher";
import { hasEnvVars } from "@/utils/supabase/check-env-vars";
import { Geist } from "next/font/google";
import { ThemeProvider } from "next-themes";
import Link from "next/link";
import "./globals.css";

const defaultUrl = process.env.VERCEL_URL
  ? `https://${process.env.VERCEL_URL}`
  : "http://localhost:3000";

export const metadata = {
  metadataBase: new URL(defaultUrl),
  title: "Koldsms - 1000 Texts Per Day",
  description: "The fastest way to get clients",
};

const geistSans = Geist({
  display: "swap",
  subsets: ["latin"],
});

export default function RootLayout({
  children,
}: Readonly<{
  children: React.ReactNode;
}>) {
  return (
    <html>
      <body>
        {children}
      </body>
    </html>
  );
}


/app/page.tsx
import Link from "next/link";
import { signInAction } from "@/app/actions";
import { FormMessage, Message } from "@/components/form-message";
import { SubmitButton } from "@/components/submit-button";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";

// Since async Client Components aren't supported yet, remove "use client" and "async" here.
// Also remove any direct awaiting of props. This now behaves as a Server Component.
export default function Login({
  searchParams,
}: {
  searchParams?: Message; // Adjust the type as needed if you have a different structure
}) {
  return (
    <div className="flex flex-col md:flex-row h-screen w-screen overflow-hidden">
      {/* Form side (left) */}
      <div className="flex w-full md:w-1/2 flex-col justify-center items-center bg-gradient-to-br from-purple-500 to-pink-500 p-6">
        <div className="bg-white w-full max-w-md p-8 rounded-md shadow-md">
          <h1 className="text-3xl font-bold text-gray-800 mb-2">Sign In</h1>
          <p className="text-sm text-gray-600">
            Don&apos;t have an account?{" "}
            <Link
              className="font-semibold text-purple-600 hover:underline"
              href="/sign-up"
            >
              Sign up
            </Link>
          </p>

          {/* The actual form */}
          <form className="flex flex-col mt-8">
            <div className="flex flex-col gap-2 mb-4">
              <Label className="text-gray-700" htmlFor="email">
                Email
              </Label>
              <Input
                name="email"
                placeholder="you@example.com"
                required
                className="p-2 border border-gray-300 rounded"
              />
            </div>
            <div className="flex flex-col gap-2 mb-4">
              <div className="flex justify-between items-center">
                <Label className="text-gray-700" htmlFor="password">
                  Password
                </Label>
                <Link
                  className="text-sm text-purple-600 hover:underline"
                  href="/forgot-password"
                >
                  Forgot Password?
                </Link>
              </div>
              <Input
                type="password"
                name="password"
                placeholder="Your password"
                required
                className="p-2 border border-gray-300 rounded"
              />
            </div>
            <div className="mb-4">
              {/* Use your server action for form submission */}
              <SubmitButton
                pendingText="Signing In..."
                formAction={signInAction}
                className="w-full bg-purple-600 text-white py-2 px-4 rounded hover:bg-purple-700"
              >
                Sign in
              </SubmitButton>
            </div>
            {/* Display any messages passed via searchParams */}
            <FormMessage message={searchParams} />
          </form>
        </div>
      </div>

      {/* Image / Decorative side (right) */}
      <div
        className="hidden md:flex md:w-1/2 bg-cover bg-center bg-no-repeat"
        style={{
          // Replace '/images/login-bg.jpg' with the correct path to your image
          backgroundImage: "url('/images/login-bg.jpg')",
        }}
      ></div>
    </div>
  );
}


/app/protected/page.tsx
import { redirect } from "next/navigation";
import { createClient } from "@/utils/supabase/server";
import { InfoIcon, Inbox, Zap, Rocket, Search, Menu, } from "lucide-react";
import FetchDataSteps from "@/components/tutorial/fetch-data-steps";

// Dummy SMS conversation data
const dummyConversations = [
  {
    id: "1",
    from: "kjloeckle@gmail.com",
    subject: "Re: 71% of active real estate agents did not sell a house last year",
    preview: "-- Kathy J Loeckle Realtor Exit Realty Mason City 2401 S. F...",
    date: "Mar 20, 2025",
    messages: [
      {
        sender: "kjloeckle@gmail.com",
        text: "Hey there, just checking in about the market details we discussed.",
        date: "Mar 20, 2025",
      },
      {
        sender: "You",
        text: "Thanks for the follow-up! I'd love to hear more data soon.",
        date: "Mar 20, 2025",
      },
    ],
  },
  {
    id: "2",
    from: "jjcomet@gmail.com",
    subject: "Re: john, its zach, do you do real estate partnerships?",
    preview: "I'm no longer in the industry – John Haley 214-564-6780 ...",
    date: "Mar 18, 2025",
    messages: [
      {
        sender: "jjcomet@gmail.com",
        text: "I'm no longer in the industry. Let me know if you have any questions though.",
        date: "Mar 18, 2025",
      },
      {
        sender: "You",
        text: "Thanks for letting me know! All the best.",
        date: "Mar 18, 2025",
      },
    ],
  },
  {
    id: "3",
    from: "joyous1fulfilled@hotmail.com",
    subject: "Re: sesi are you still a life coach?",
    preview: "Hello Zach, Thank you for your interest. I am still a life c...",
    date: "Mar 17, 2025",
    messages: [
      {
        sender: "joyous1fulfilled@hotmail.com",
        text: "Hello Zach, Thanks for reaching out. I'm definitely still offering sessions!",
        date: "Mar 17, 2025",
      },
      {
        sender: "You",
        text: "Great to hear! I'll schedule something soon.",
        date: "Mar 17, 2025",
      },
    ],
  },
  {
    id: "4",
    from: "jeremysmith@kw.com",
    subject: "Re: jeremy, its zach, do you do real estate partnerships?",
    preview: "Zach, Thanks for reaching out. I'm not interested at this t...",
    date: "Mar 17, 2025",
    messages: [
      {
        sender: "jeremysmith@kw.com",
        text: "Zach, thanks for contacting me. I'm not interested at this time, but let's keep in touch.",
        date: "Mar 17, 2025",
      },
      {
        sender: "You",
        text: "Understood, Jeremy. Will do.",
        date: "Mar 17, 2025",
      },
    ],
  },
];

// Props shape for a Next.js 13 page receiving searchParams
type ProtectedPageProps = {
  searchParams?: {
    conversationId?: string;
  };
};

// The main protected page
export default async function ProtectedPage({ searchParams }: ProtectedPageProps) {
  // 1) Supabase server logic: only allow authenticated users
  const supabase = await createClient();
  const {
    data: { user },
  } = await supabase.auth.getUser();

  if (!user) {
    return redirect("/sign-in");
  }

  // 2) Determine which conversation is selected based on the query param
  const selectedId = searchParams?.conversationId;
  const selectedConversation = dummyConversations.find((c) => c.id === selectedId);

  // 3) Render the full page layout (cloning the example UI)
  return (
    <div className="flex h-screen w-full overflow-hidden">
      {/* LEFT SIDEBAR (Icons) */}
      <aside className="hidden sm:flex flex-col items-center bg-white border-r w-16 py-4">
        {/* Logo or brand name at the top */}
        <div className="mb-6 font-bold text-blue-600 text-sm">Unibox</div>
        {/* Icons (dummy) */}
        <button className="mb-6 text-gray-500 hover:text-blue-500">
          <Search size={20} />
        </button>
        <button className="mb-6 text-gray-500 hover:text-blue-500">
          <Zap size={20} />
        </button>
        <button className="mb-6 text-gray-500 hover:text-blue-500">
          <Rocket size={20} />
        </button>
        <button className="text-gray-500 hover:text-blue-500">
          <Menu size={20} />
        </button>
      </aside>

      {/* MIDDLE SIDEBAR (Inbox Navigation) */}
      <nav className="flex flex-col bg-white border-r w-60 max-w-xs">
        <div className="px-4 py-4 border-b flex items-center">
          <span className="text-lg font-bold">Unibox</span>
        </div>

        {/* Nav Links */}
        <div className="flex flex-col p-4 space-y-2">
          <a href="#" className="text-sm text-gray-600 hover:text-black">
            Status
          </a>
          <a href="#" className="text-sm text-gray-600 hover:text-black">
            All Campaigns
          </a>
          <a href="#" className="text-sm text-gray-600 hover:text-black">
            All Inboxes
          </a>
          <a href="#" className="text-sm text-gray-600 hover:text-black">
            More
          </a>
        </div>

        {/* Divider */}
        <div className="mt-2 border-t" />

        {/* Tabs (Primary / Others) + Search */}
        <div className="p-4 flex flex-col gap-4">
          <div className="flex gap-4 text-sm">
            <a
              href="#"
              className="border-b-2 border-black pb-1 text-black font-medium"
            >
              Primary
            </a>
            <a href="#" className="text-gray-500 pb-1">
              Others
            </a>
          </div>

          <div>
            <input
              type="search"
              placeholder="Search mail"
              className="w-full border rounded p-2 text-sm"
            />
          </div>
        </div>

        {/* Conversation List */}
        <div className="overflow-auto">
          {dummyConversations.map((conv) => (
            <a
              key={conv.id}
              // Navigate with a query param to show the conversation
              href={`?conversationId=${conv.id}`}
              className={`block px-4 py-3 border-b hover:bg-gray-50 ${
                conv.id === selectedId ? "bg-gray-100" : ""
              }`}
            >
              <div className="flex items-center justify-between text-xs text-gray-500">
                <span>{conv.from}</span>
                <span>{conv.date}</span>
              </div>
              <div className="text-sm font-medium text-gray-800 line-clamp-1">
                {conv.subject}
              </div>
              <div className="text-xs text-gray-500 truncate">
                {conv.preview}
              </div>
            </a>
          ))}
        </div>
      </nav>

      {/* MAIN CONTENT (Selected Conversation or Placeholder) */}
      <main className="flex-1 bg-gray-50 flex flex-col">
        {/* If no conversation is selected, show a placeholder icon */}
        {!selectedConversation && (
          <div className="flex-1 flex flex-col justify-center items-center text-gray-300">
            <Inbox size={64} />
            <p className="mt-2 text-gray-500">Select a conversation</p>
          </div>
        )}

        {/* If a conversation is selected, show the messages */}
        {selectedConversation && (
          <div className="flex-1 flex flex-col">
            <div className="p-4 border-b bg-white">
              <h2 className="text-lg font-semibold text-gray-800">
                {selectedConversation.subject}
              </h2>
              <p className="text-sm text-gray-500">
                From: {selectedConversation.from}
              </p>
            </div>
            <div className="flex-1 overflow-auto p-4 space-y-4">
              {selectedConversation.messages.map((msg, idx) => (
                <div key={idx} className="bg-white p-3 rounded shadow-sm">
                  <div className="text-xs text-gray-500">
                    {msg.sender} – {msg.date}
                  </div>
                  <p className="text-sm text-gray-800">{msg.text}</p>
                </div>
              ))}
            </div>
          </div>
        )}
      </main>

      {/* Existing skeleton content you wanted to keep (just below the main UI).
          You could also place it below or above in your layout if you prefer. */}
      <div className="absolute bottom-0 left-0 right-0 bg-white border-t p-4">
        {/* Info banner */}
        <div className="bg-accent text-sm p-3 px-5 rounded-md text-foreground flex gap-3 items-center mb-4">
          <InfoIcon size={16} strokeWidth={2} />
          This is a protected page that you can only see as an authenticated user
        </div>

        {/* Display user details */}
        <div className="flex flex-col gap-2 items-start mb-6">
          <h2 className="font-bold text-xl mb-2">Your user details</h2>
          <pre className="text-xs font-mono p-3 rounded border max-h-32 overflow-auto">
            {JSON.stringify(user, null, 2)}
          </pre>
        </div>

        {/* Next steps from your existing tutorial component */}
        <div>
          <h2 className="font-bold text-xl mb-2">Next steps</h2>
          <FetchDataSteps />
        </div>
      </div>
    </div>
  );
}


/app/protected/reset-password/page.tsx
import { resetPasswordAction } from "@/app/actions";
import { FormMessage, Message } from "@/components/form-message";
import { SubmitButton } from "@/components/submit-button";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";

export default async function ResetPassword(props: {
  searchParams: Promise<Message>;
}) {
  const searchParams = await props.searchParams;
  return (
    <form className="flex flex-col w-full max-w-md p-4 gap-2 [&>input]:mb-4">
      <h1 className="text-2xl font-medium">Reset password</h1>
      <p className="text-sm text-foreground/60">
        Please enter your new password below.
      </p>
      <Label htmlFor="password">New password</Label>
      <Input
        type="password"
        name="password"
        placeholder="New password"
        required
      />
      <Label htmlFor="confirmPassword">Confirm password</Label>
      <Input
        type="password"
        name="confirmPassword"
        placeholder="Confirm password"
        required
      />
      <SubmitButton formAction={resetPasswordAction}>
        Reset password
      </SubmitButton>
      <FormMessage message={searchParams} />
    </form>
  );
}

